/*
 * protocol_ext.h
 *
 * protocal for xhub and ap
 *
 * Copyright (c) 2013-2019 Huawei Technologies Co., Ltd.
 *
 * This software is licensed under the terms of the GNU General Public
 * License version 2, as published by the Free Software Foundation, and
 * may be copied, distributed, and modified under those terms.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 *
 */

#ifndef __PROTOCOL_EXT_H__
#define __PROTOCOL_EXT_H__

/* --------------------------tag-------------------------- */
typedef enum {
	TAG_FLUSH_META,
	TAG_BEGIN = 0x01,
	TAG_SENSOR_BEGIN = TAG_BEGIN,
	TAG_ACCEL = TAG_SENSOR_BEGIN,
	TAG_GYRO,
	TAG_MAG,
	TAG_ALS,
	TAG_PS, /* 5 */
	TAG_LINEAR_ACCEL,
	TAG_GRAVITY,
	TAG_ORIENTATION,
	TAG_ROTATION_VECTORS,
	TAG_PRESSURE, /* 0x0a = 10 */
	TAG_HALL,
	TAG_MAG_UNCALIBRATED,
	TAG_GAME_RV,
	TAG_GYRO_UNCALIBRATED,
	TAG_SIGNIFICANT_MOTION, /* 0x0f = 15 */
	TAG_STEP_DETECTOR,
	TAG_STEP_COUNTER,
	TAG_GEOMAGNETIC_RV,
	TAG_HANDPRESS,
	TAG_FINGERSENSE, /* 0x14 = 20 */
	TAG_PHONECALL,
	TAG_CONNECTIVITY,
	TAG_OIS,
	TAG_HINGE,
	TAG_RPC, /* 0x19 = 25 should same with modem definition */
	TAG_CAP_PROX,
	TAG_MAGN_BRACKET,
	TAG_AGT,
	TAG_COLOR,
	TAG_ACCEL_UNCALIBRATED, /* 0x1e = 30 */
	TAG_TOF,
	TAG_DROP,
	TAG_POSTURE,
	TAG_EXT_HALL,
	TAG_ACC1 = 35, /* 0x23 = 35 */
	TAG_GYRO1,
	TAG_ALS1,
	TAG_MAG1,
	TAG_ALS2,
	TAG_PS1, /* 0x28 = 40 */
	TAG_CAP_PROX1,
	TAG_SOUND,
	TAG_AUX_END = TAG_SOUND,
	TAG_THERMOMETER,
	TAG_SENSOR_END = 44, /* sensor end should < 45 */
	TAG_HW_PRIVATE_APP_START = 45, /* 0x2d = 45 */
	TAG_AR = TAG_HW_PRIVATE_APP_START,
	TAG_MOTION,
	TAG_CONNECTIVITY_AGENT,
	TAG_PDR,
	TAG_CA,
	TAG_FP, /* 0x32 = 50 */
	TAG_KEY,
	TAG_AOD,
	TAG_FLP,
	TAG_ENVIRONMENT,
	TAG_LOADMONITOR, /* 0x37 = 55 */
	TAG_APP_CHRE,
	TAG_FP_UD,
	TAG_THP,
#ifdef CONFIG_CONTEXTHUB_SWING_20
	TAG_SWING = 63,
#endif
	/* APP_END should < 64, because power log used bitmap */
	TAG_HW_PRIVATE_APP_END,
	TAG_MODEM = 128, /* 0x80 = 128 */
	TAG_TP,
	TAG_SPI,
	TAG_I2C,
	TAG_UART,
	TAG_RGBLIGHT,
	TAG_BUTTONLIGHT,
	TAG_BACKLIGHT, /* 0x86 = 135 */
	TAG_VIBRATOR,
	TAG_SYS,
	TAG_LOG,
	TAG_LOG_BUFF,
	TAG_RAMDUMP, /* 0x8b = 140 */
	TAG_FAULT,
	TAG_SHAREMEM,
	TAG_SHELL_DBG,
	TAG_PD,
	TAG_I3C, /* 0x90 = 145 */
	TAG_DATA_PLAYBACK,
	TAG_CHRE,
	TAG_SENSOR_CALI,
	TAG_CELL,
	TAG_BIG_DATA,
#ifndef CONFIG_CONTEXTHUB_SWING_20
	TAG_SWING = 151, /* for swing1.0 */
#endif
	TAG_SWING_DBG = 152,
	TAG_SWING_CAM = 154,
	TAG_TIMESTAMP = 157,
	TAG_SWING_TOF = 158,
	TAG_KB = 180,
	TAG_END = 0xFF
} obj_tag_t;

/* --------------------------cmd-------------------------- */
typedef enum {
	CMD_CMN_OPEN_REQ = 0x01,
	CMD_CMN_OPEN_RESP,
	CMD_CMN_CLOSE_REQ,
	CMD_CMN_CLOSE_RESP,
	CMD_CMN_INTERVAL_REQ,
	CMD_CMN_INTERVAL_RESP,
	CMD_CMN_CONFIG_REQ,
	CMD_CMN_CONFIG_RESP,
	CMD_CMN_FLUSH_REQ,
	CMD_CMN_FLUSH_RESP,
	CMD_CMN_IPCSHM_REQ,
	CMD_CMN_IPCSHM_RESP,

	CMD_DATA_REQ = 0x1f,
	CMD_DATA_RESP,

	CMD_SET_FAULT_TYPE_REQ, /* 0x21 */
	CMD_SET_FAULT_TYPE_RESP,
	CMD_SET_FAULT_ADDR_REQ,
	CMD_SET_FAULT_ADDR_RESP,

	/* SPI */
	CMD_SPI_BAUD_REQ, /* 0x25 */
	CMD_SPI_BAUD_RESP,
	CMD_SPI_TRANS_REQ,
	CMD_SPI_TRANS_RESP,

	/* I2C */
	CMD_I2C_TRANS_REQ, /* 0x29 */
	CMD_I2C_TRANS_RESP,

	/* system status */
	CMD_SYS_STATUSCHANGE_REQ, /* 0x2b */
	CMD_SYS_STATUSCHANGE_RESP,
	CMD_SYS_DYNLOAD_REQ,
	CMD_SYS_DYNLOAD_RESP,
	CMD_SYS_HEARTBEAT_REQ,
	CMD_SYS_HEARTBEAT_RESP,
	CMD_SYS_LOG_LEVEL_REQ,
	CMD_SYS_LOG_LEVEL_RESP,
	CMD_SYS_CTS_RESTRICT_MODE_REQ,
	CMD_SYS_CTS_RESTRICT_MODE_RESP,
	CMD_SYS_STATUSREADY_REQ,
	CMD_SYS_STATUSREADY_RESP,

	/* LOG */
	CMD_LOG_REPORT_REQ, /* 0x35 */
	CMD_LOG_REPORT_RESP,
	CMD_LOG_CONFIG_REQ,
	CMD_LOG_CONFIG_RESP,
	CMD_LOG_POWER_REQ,
	CMD_LOG_POWER_RESP,

	/* SHAREMEM */
	CMD_SHMEM_AP_RECV_REQ, /* 0x3b */
	CMD_SHMEM_AP_RECV_RESP,
	CMD_SHMEM_AP_SEND_REQ,
	CMD_SHMEM_AP_SEND_RESP,

	/* SHELL_DBG */
	CMD_SHELL_DBG_REQ, /* 0x43 */
	CMD_SHELL_DBG_RESP,

	/* LoadMonitor */
	CMD_READ_AO_MONITOR_SENSOR, /* 0x45 */
	CMD_READ_AO_MONITOR_SENSOR_RESP,

	/* TAG_DATA_PLAYBACK */
	CMD_DATA_PLAYBACK_DATA_READY_REQ, /* 0x47 BACKPLAY */
	CMD_DATA_PLAYBACK_DATA_READY_RESP,
	CMD_DATA_PLAYBACK_BUF_READY_REQ, /* RECORD */
	CMD_DATA_PLAYBACK_BUF_READY_RESP,

	/* BIG DATA */
	CMD_BIG_DATA_REQUEST_DATA, /* 0x4f */
	CMD_BIG_DATA_REQUEST_DATA_RESP,
	CMD_BIG_DATA_SEND_TO_AP, /* 0x51 */
	CMD_BIG_DATA_SEND_TO_AP_RESP, /* 0x52 */

	/* tag sys for hall status */
	CMD_SYS_HALL_STATUS_REQ = 0x53, /* 0x53 */
	CMD_SYS_HALL_STATUS_RESP = 0x54, /* 0x54 */

	/* I3C */
	CMD_I3C_TRANS_REQ = 0x57,
	CMD_I3C_TRANS_RESP,

	/* tag als for ud */
	CMD_ALS_RUN_STOP_PARA_REQ = 0x59,
	CMD_ALS_RUN_STOP_PARA_RESP = 0x5a,
	CMD_ALS_BL_PARA_REQ = 0x5d,
	CMD_ALS_BL_PARA_RESP = 0x5e,
	CMD_ALS_COEF_BLOCK_REQ = 0x5f,
	CMD_ALS_COEF_BLOCK_RESP = 0x60,

	/* tag TAG_AIC_DBG for tiny pmu profile */
	CMD_DATA_PMU_PROFILE = 0x70,

	/* log buff */
	CMD_LOG_SER_REQ = 0xf1,
	CMD_LOG_USEBUF_REQ,
	CMD_LOG_BUFF_ALERT,
	CMD_LOG_BUFF_FLUSH,
	CMD_LOG_BUFF_FLUSHP,
	CMD_EXT_LOG_FLUSH,
	CMD_EXT_LOG_FLUSHP,

	CMD_SYS_SYNC_TIME_REQ = 0xf8,
	CMD_SYS_SYNC_TIME_RESP,

	/* max cmd */
	CMD_ERR_RESP = 0xfe,
} obj_cmd_t;

typedef enum {
	EN_OK = 0,
	EN_FAIL,
} err_no_t;

typedef enum {
	NO_RESP,
	RESP,
} obj_resp_t;

typedef enum {
	MOTION_TYPE_START,
	MOTION_TYPE_PICKUP,
	MOTION_TYPE_FLIP,
	MOTION_TYPE_PROXIMITY,
	MOTION_TYPE_SHAKE,
	MOTION_TYPE_TAP,
	MOTION_TYPE_TILT_LR,
	MOTION_TYPE_ROTATION,
	MOTION_TYPE_POCKET,
	MOTION_TYPE_ACTIVITY,
	MOTION_TYPE_TAKE_OFF,
	MOTION_TYPE_EXTEND_STEP_COUNTER,
	MOTION_TYPE_EXT_LOG, /* type 0xc */
	MOTION_TYPE_HEAD_DOWN,
	MOTION_TYPE_PUT_DOWN,
	MOTION_TYPE_REMOVE,
	MOTION_TYPE_FALL,
	MOTION_TYPE_SIDEGRIP,
	MOTION_TYPE_MOVE,
	MOTION_TYPE_LF_END, /* 100hz sample type end */
	/* 500hz sample type start */
	MOTION_TYPE_TOUCH_LINK = 32,
	MOTION_TYPE_END, /* 500hz sample type end */
} motion_type_t;

typedef enum {
	AUTO_MODE = 0,
	FIFO_MODE,
	INTEGRATE_MODE,
	REALTIME_MODE,
	MODE_END
} obj_report_mode_t;

typedef enum {
	/* system status */
	ST_NULL = 0,
	ST_BEGIN,
	ST_POWERON = ST_BEGIN,
	ST_MINSYSREADY,
	ST_DYNLOAD,
	ST_MCUREADY,
	ST_TIMEOUTSCREENOFF,
	ST_SCREENON, /* 6 */
	ST_SCREENOFF, /* 7 */
	ST_SLEEP, /* 8 */
	ST_WAKEUP, /* 9 */
	ST_POWEROFF,
	ST_RECOVERY_BEGIN, /* for ar notify modem when iom3 recovery */
	ST_RECOVERY_FINISH, /* for ar notify modem when iom3 recovery */
	ST_END
} sys_status_t;

typedef enum {
	DUBAI_EVENT_NULL = 0,
	DUBAI_EVENT_AOD_PICKUP = 3,
	DUBAI_EVENT_AOD_PICKUP_NO_FINGERDOWN = 4,
	DUBAI_EVENT_AOD_TIME_STATISTICS = 6,
	DUBAI_EVENT_FINGERPRINT_ICON_COUNT = 7,
	DUBAI_EVENT_ALL_SENSOR_STATISTICS = 8,
	DUBAI_EVENT_ALL_SENSOR_TIME = 9,
	DUBAI_EVENT_SWING = 10,
	DUBAI_EVENT_TP = 11,
	DUBAI_EVENT_END
} dubai_event_type_t;

typedef enum {
	BIG_DATA_EVENT_MOTION_TYPE = 936005001,
	BIG_DATA_EVENT_DDR_INFO,
	BIG_DATA_EVENT_TOF_PHONECALL,
	BIG_DATA_EVENT_PHONECALL_SCREEN_STATUS,
	BIG_DATA_EVENT_PS_SOUND_INFO = 936005006,
	BIG_DATA_EVENT_VIB_RESP_TIME = 907400028,
	BIG_DATA_FOLD_TEMP = 936004016,
	BIG_DATA_EVENT_SYSLOAD_PERIOD = 936005007,
	BIG_DATA_EVENT_SYSLOAD_TRIGGER = 936005008,
	BIG_DATA_EVENT_AOD_INFO = 936005009,
} big_data_event_id_t;

typedef enum {
	TYPE_STANDARD,
	TYPE_EXTEND
} type_step_counter_t;

#endif /* __PROTOCOL_EXT_H__ */
